###Load following Packages###
library(shiny)
library(shinystan)
library(ggplot2)
library(bayesplot)
library(rstan)
library(knitr)
###########################################

########Stan Code for NOTED Distribution#####

Noted<-'functions {
  real NOTED_log_lpdf(real z, real nu, real w, real lam) {
    if (z <= 0 || nu <= 0 || w <= 0 || lam <= 0) {
        return negative_infinity();  // Ensure valid inputs
    }
    real term1 = log(nu) + log(w) + log(lam) + w * log1p(nu) - lam * z;
    real term2 = (w - 1) * log1m_exp(-lam * z);
    real term3 = (w + 1) * log1p(nu - exp(-lam * z));
    return term1 + term2 - term3;
  }
real NOTED_rng(real nu, real w, real lam) {
    real u = uniform_rng(0, 1);
    real term1 = -(1 / lam);
    real term2 = 1 - pow(u / pow((1 + nu), w), 1 / w) * (nu + 1);
    real term3 = 1 - pow(u / pow((1 + nu), w), 1 / w);
    real d = term1 * log(term2 / term3);
    return d;
  }
}

data {
  int<lower=0> N;
  vector[N] z;
}

parameters {
  real<lower=0> nu;
  real<lower=0> lam;
  real<lower=0> w;
}

model {
  for (i in 1:N) {
    target += NOTED_log_lpdf(z[i] | nu, w, lam);
  }
nu~gamma(1.5,10);  
  w ~ gamma(0.5,0.5);
  lam ~ gamma(0.5,0.5);
}
generated quantities {
  vector[N] log_lik;
  vector[N] y_rep;
  
  for (i in 1:N) {
    log_lik[i] = NOTED_log_lpdf(z[i] | nu, w, lam);  // Corrected log-likelihood computation
    y_rep[i] = NOTED_rng(nu, w, lam);  // Posterior predictive samples
  }
}'

# Data list for Stan
z<-c(83, 51, 87, 60, 28, 95, 8, 27, 28, 56, 8, 25, 68, 146, 89, 18,
     73, 69, 9, 37, 10, 82, 29, 8, 60, 61, 61, 18, 169, 25, 8, 26,
     11, 83, 11, 42, 17, 14, 9, 12, 15, 10, 18, 16, 29, 54, 91, 8,
     17, 55, 10, 35, 47, 77, 36, 17, 21, 36, 18, 40, 10, 7, 34, 27)

data_list <- list(
  N = length(z),
  z = z
)
fit<- stan(model_code = Noted,data = data_list, 
              iter = 10000,chains = 4,seed=1234)

#$$$$$$$$$$$$$$$$ Table creation of output *******

tab<- summary(fit, pars=c("nu","w","lam","lp__"), chain=0, 
              probs = c(0.5, 0.025, 0.975), digits = 4)$summary
tab<- round(tab, 4)
tab<- as.data.frame(tab, keep.rownames= c("nu","w","lam", "log Likelihood"))
tab
rownames(tab) <- c("$\\nu$", "$\\omega$", "$\\lambda$", "log Likelihood")
latex_code <-kable(tab, format = "latex", booktabs = TRUE, escape = FALSE)
cat(latex_code)
##########Convergence Summary####
# Get per-chain sampler statistics
sampler_params <- get_sampler_params(fit, inc_warmup = FALSE)

# Convert to summary
summary_list <- lapply(sampler_params, function(chain) {
  data.frame(
    accept_stat = mean(chain[, "accept_stat__"]),
    stepsize = mean(chain[, "stepsize__"]),
    treedepth = mean(chain[, "treedepth__"]),
    n_leapfrog = mean(chain[, "n_leapfrog__"]),
    divergent = sum(chain[, "divergent__"]),
    energy = mean(chain[, "energy__"])
  )
})

# Combine to a single data frame
summary_df <- do.call(rbind, summary_list)
summary_df$chain <- paste("Chain", 1:nrow(summary_df))

# Compute the overall summary
overall <- data.frame(
  accept_stat = mean(summary_df$accept_stat),
  stepsize = mean(summary_df$stepsize),
  treedepth = mean(summary_df$treedepth),
  n_leapfrog = mean(summary_df$n_leapfrog),
  divergent = sum(summary_df$divergent),
  energy = mean(summary_df$energy),
  chain = "All Chains"
)

# Final table (reorder columns)
final_summary <- rbind(overall, summary_df)[, c("chain", "accept_stat", "stepsize", "treedepth", "n_leapfrog", "divergent", "energy")]

# Print as LaTeX table
knitr::kable(final_summary, format = "latex", digits = 4, caption = "Chains Convergence Summary", booktabs = TRUE)

####It can be extracted through shiny###
launch_shinystan(fit)
###PPC Plots###
parms<-rstan::extract(fit)
y<-parms$y_rep
library(bayesplot)
color_scheme_set("viridisC")

ppc_ecdf_overlay(z, y[1:200, ])
ppc_dens_overlay(z, y[1300:1400,], alpha = 1.75)
#### Trace Plot####
trace<- stan_trace(fit, pars = c("nu","w","lam","lp__"), alpha=1)
trace1<- trace + scale_color_manual(values = c( "blue", "green", "purple","black"))

trace + scale_color_brewer(type = "div") + theme(legend.position = "top")

facet_style<- theme(strip.background = ggplot2::element_rect(fill = "gold"), 
                    strip.text = ggplot2::element_text(size = 8, color = "black"))

(trace<- trace1 + facet_style) # very good for report

###Auto Correlation####
color_scheme_set("brewer-Spectral")

(p <- mcmc_acf_bar(fit, pars = c("nu","w","lam","lp__"), alpha=2))

# add horiztonal dashed line at 0.5
p + hline_at(0.5, linetype = 2, size = 0.15, alpha=2, color = "red")
#ggsave("auto_corr_plot.pdf", width = 5, height = 5)

####Pairs Plot ###

posterior_samples <- as.array(fit)
# Create pairs plot for the parameters of interest
mcmc_pairs(posterior_samples, pars = c("nu", "w", "lam"))

####Prior and Posterior Plots Together (Optional)##
posterior_samples <- extract(model1)
posterior_samples$w

set.seed(123)
prior_draws <- data.frame(
  nu = rgamma(10000, 1.5, 10),
  w  = rgamma(10000, 0.5, 0.5),
  lam = rgamma(10000, 0.5, 0.5)
)
###Extra Plots (Optional)####
nu<-ggplot() +
  geom_density(data = prior_draws, aes(x = nu), fill = "skyblue", alpha = 0.5) +
  geom_density(data = as.data.frame(posterior_samples), aes(x = nu), fill="red",color = "red") +
  labs(title = expression("Prior (" * blue * ") vs Posterior (" * red * ") for " * nu),
       x = expression(nu),
       y = "Density") +
  theme_minimal()

w<-ggplot() +
  geom_density(data =prior_draws , aes(x = w), fill = "skyblue", alpha = 0.5) +
  geom_density(data = as.data.frame(posterior_samples), aes(x = w), fill="red",color = "red") +
  labs(
    title = expression("Prior (" * blue * ") vs Posterior (" * red * ") for " * omega),
    x = expression(omega),
    y = "Density"
  ) +
  theme_minimal()

# Truncate prior to match posterior scale
prior_filtered <- subset(prior_draws, lam < 0.5)
lam<-ggplot() +
  geom_density(data = prior_filtered, aes(x = lam), fill = "skyblue", alpha = 0.5) +
  geom_density(data = as.data.frame(posterior_samples), aes(x = lam),fill="red", color = "red") +
  labs(title = expression("Prior (" * blue * ") vs Posterior (" * red * ") for " * lambda),
       x = expression(lambda),
       y = "Density") +
  theme_minimal()
###############################################################################################################
###############################################################################################################




